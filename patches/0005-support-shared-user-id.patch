--- a/app/src/main/java/com/topjohnwu/magisk/core/model/su/SuPolicy.kt
+++ b/app/src/main/java/com/topjohnwu/magisk/core/model/su/SuPolicy.kt
@@ -1,11 +1,14 @@
 @file:SuppressLint("InlinedApi")
+@file:Suppress("DEPRECATION")
 
 package com.topjohnwu.magisk.core.model.su
 
 import android.annotation.SuppressLint
 import android.content.pm.PackageManager
+import android.content.res.Configuration
 import android.graphics.drawable.Drawable
 import com.topjohnwu.magisk.core.model.su.SuPolicy.Companion.INTERACTIVE
+import com.topjohnwu.magisk.core.utils.currentLocale
 import com.topjohnwu.magisk.ktx.getLabel
 
 data class SuPolicy(
@@ -43,16 +46,37 @@ data class SuPolicy(
 fun Map<String, String>.toPolicy(pm: PackageManager): SuPolicy {
     val uid = get("uid")?.toIntOrNull() ?: -1
     val packageName = get("package_name").orEmpty()
-    val info = pm.getApplicationInfo(packageName, PackageManager.MATCH_UNINSTALLED_PACKAGES)
-
-    if (info.uid != uid)
-        throw PackageManager.NameNotFoundException()
+    var appName: String
+    var icon: Drawable
+    if (packageName.indexOf(':') != -1) {
+        val name = packageName.split(':', limit = 2)
+        val nowName = pm.getNameForUid(uid)
+        if (nowName != packageName) throw PackageManager.NameNotFoundException()
+        appName = "[SharedUser] ${name[0]}"
+        icon = pm.defaultActivityIcon
 
+        val pkgs = pm.getPackagesForUid(uid) ?: throw PackageManager.NameNotFoundException()
+        for (p in pkgs) {
+            val pi = pm.getPackageInfo(p, PackageManager.MATCH_UNINSTALLED_PACKAGES)
+            if (pi.sharedUserLabel == 0) break
+            val res = pm.getResourcesForApplication(pi.applicationInfo)
+            val config = Configuration().apply { setLocale(currentLocale) }
+            res.updateConfiguration(config, res.displayMetrics)
+            appName = "[SharedUser] ${res.getString(pi.sharedUserLabel)}"
+            icon = pi.applicationInfo.loadIcon(pm)
+            break
+        }
+    } else {
+        val info = pm.getApplicationInfo(packageName, PackageManager.MATCH_UNINSTALLED_PACKAGES)
+        if (info.uid != uid) throw PackageManager.NameNotFoundException()
+        appName = info.getLabel(pm)
+        icon = info.loadIcon(pm)
+    }
     return SuPolicy(
         uid = uid,
         packageName = packageName,
-        appName = info.getLabel(pm),
-        icon = info.loadIcon(pm),
+        appName = appName,
+        icon = icon,
         policy = get("policy")?.toIntOrNull() ?: INTERACTIVE,
         until = get("until")?.toLongOrNull() ?: -1L,
         logging = get("logging")?.toIntOrNull() != 0,
@@ -62,14 +86,35 @@ fun Map<String, String>.toPolicy(pm: PackageManager): SuPolicy {
 
 @Throws(PackageManager.NameNotFoundException::class)
 fun Int.toPolicy(pm: PackageManager, policy: Int = INTERACTIVE): SuPolicy {
-    val pkg = pm.getPackagesForUid(this)?.firstOrNull()
-        ?: throw PackageManager.NameNotFoundException()
-    val info = pm.getApplicationInfo(pkg, PackageManager.MATCH_UNINSTALLED_PACKAGES)
+    val pkg = pm.getNameForUid(this) ?: throw PackageManager.NameNotFoundException()
+    var appName: String
+    var icon: Drawable
+    if (pkg.indexOf(':') != -1) {
+        val name = pkg.split(':', limit = 2)
+        appName = "[SharedUser] ${name[0]}"
+        icon = pm.defaultActivityIcon
+
+        val pkgs = pm.getPackagesForUid(this) ?: throw PackageManager.NameNotFoundException()
+        for (p in pkgs) {
+            val pi = pm.getPackageInfo(p, PackageManager.MATCH_UNINSTALLED_PACKAGES)
+            if (pi.sharedUserLabel == 0) break
+            val res = pm.getResourcesForApplication(pi.applicationInfo)
+            val config = Configuration().apply { setLocale(currentLocale) }
+            res.updateConfiguration(config, res.displayMetrics)
+            appName = "[SharedUser] ${res.getString(pi.sharedUserLabel)}"
+            icon = pi.applicationInfo.loadIcon(pm)
+            break
+        }
+    } else {
+        val info = pm.getApplicationInfo(pkg, PackageManager.MATCH_UNINSTALLED_PACKAGES)
+        appName = info.getLabel(pm)
+        icon = info.loadIcon(pm)
+    }
     return SuPolicy(
-        uid = info.uid,
+        uid = this,
         packageName = pkg,
-        appName = info.getLabel(pm),
-        icon = info.loadIcon(pm),
+        appName = appName,
+        icon = icon,
         policy = policy
     )
 }

